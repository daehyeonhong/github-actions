name: ci-cd

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-java@v4.2.1
        with:
          distribution: 'semeru'
          java-version: '21'

      - uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_API_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_API_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with jib
        run: |
          ./gradlew jib \
          -Djib.to.auth.username=${{ secrets.DOCKER_USERNAME }} \
          -Djib.to.auth.password=${{ secrets.DOCKER_PASSWORD }} \
          -Djib.to.image=${{ secrets.DOCKER_IMAGE }}
          -Djib.to.tags=${{ github.sha }}

      - name: build docker file and setting deploy files
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
        run: |
          touch scripts/deploy.sh
          echo "docker pull $DOCKER_IMAGE:$IMAGE_TAG" >> scripts/deploy.sh
          echo "docker run -p 8080:8080 -d --restart always --name mood-api $DOCKER_IMAGE:$IMAGE_TAG" >> scripts/deploy.sh

      - name: Upload to S3
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          zip -r deploy-$IMAGE_TAG.zip ./scripts appspec.yml
          aws s3 cp --region ap-northeast-2 --acl private ./deploy-$IMAGE_TAG.zip s3://${{ secrets.CODEDEPLOY_BUCKET }}

      - name: Deploy with AWS CodeDeploy
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws deploy create-deployment \
          --application-name ${{ secrets.CODEDEPLOY_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODEDEPLOY_GROUP_NAME }} \
          --s3-location bucket=${{ secrets.CODEDEPLOY_BUCKET }},bundleType=zip,key=deploy-$IMAGE_TAG.zip